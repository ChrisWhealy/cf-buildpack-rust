#!/usr/bin/env bash
# usage: bin/supply <build-dir> <cache-dir> <env-dir>

BUILD_DIR=${1:-}
# CACHE_DIR=${2:-}
# ENV_DIR=${3:-}

CONFIG_FILE=RustToolchain
LOG_BUILD_PHASES=CFLogBuildPhases
PHASE_NAME=supply

# Determine if build phase logging should be switched on
if [ -f "$BUILD_DIR/$LOG_BUILD_PHASES" ]
then
  # shellcheck source=/dev/null
  . "$(dirname "$0")/log_utils"
else
  # shellcheck source=/dev/null
  . "$(dirname "$0")/log_utils_noop"
fi

log_build_phase_enter $PHASE_NAME

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Install/Update Rust toolchain
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VERSION=stable

# Pickup channel version from configuration file if present
log_build_phase_step 'Checking for presence of configuration file %s\n' $CONFIG_FILE

if [ -f "$BUILD_DIR/$CONFIG_FILE" ]
then
  if [ -s "$BUILD_DIR/$CONFIG_FILE" ]
  then
    VERSION="$(cat "$BUILD_DIR/$CONFIG_FILE")"
  else
    log_build_phase_step 'Ignoring empty configuration file %s\n' $CONFIG_FILE
  fi
else
  log_build_phase_step 'Configuration file %s not found\n' $CONFIG_FILE
fi

log_build_phase_step 'Using Rust %s channel\n' "$VERSION"

if command -v rustup &> /dev/null
then
  # It's possible that $VERSION has been updated since Rust was installed in this container
  log_build_phase_step 'Rust already installed - checking for updates\n'
  rustup self update
  rustup update "$VERSION"
  rustup default "$VERSION"
else
  log_build_phase_step 'Rust not installed - downloading rustup\n'
  curl https://sh.rustup.rs -sSf > rustup.sh
  chmod u+x rustup.sh

  log_build_phase_step 'Installing Rust %s channel\n' "$VERSION"
  ./rustup.sh -y --default-toolchain "$VERSION"
  rm rustup.sh
fi

log_build_phase_exit $PHASE_NAME
