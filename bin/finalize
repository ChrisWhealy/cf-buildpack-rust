#!/usr/bin/env bash
# usage: bin/finalize <build-dir> <cache-dir> <env-dir>

# Throw toys out of pram if any command fails or a variable is unset
set -eu

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
# ENV_DIR=${3:-}

CONFIG_FILE=RustConfig
LOG_BUILD_PHASES=CFLogBuildPhases
PHASE_NAME=finalize

# Determine if build phase logging should be switched on
if [ -f "$BUILD_DIR/$LOG_BUILD_PHASES" ]
then
  # shellcheck source=/dev/null
  . "$(dirname "$0")/log_utils"
else
  # shellcheck source=/dev/null
  . "$(dirname "$0")/log_utils_noop"
fi

log_build_phase_enter $PHASE_NAME

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Rust Build Settings
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Ensure that at least CARGO_HOME is set correctly
# shellcheck source=/dev/null
. "$HOME/.cargo/env"

# Default build flags to pass to `cargo build`.
RUST_CARGO_BUILD_PROFILE="release"
RUST_CARGO_BUILD_FLAGS=""

# Import any cargo specific environment variables if present
log_build_phase_step 'Checking for presence of configuration file %s\n' $CONFIG_FILE

if [ -f "$BUILD_DIR/$CONFIG_FILE" ]
then
  if [ -s "$BUILD_DIR/$CONFIG_FILE" ]
  then
    log_build_phase_step 'Using cargo variables from configuration file %s\n' $CONFIG_FILE
    cat "$BUILD_DIR/$CONFIG_FILE"

    # shellcheck source=/dev/null
    . "$BUILD_DIR/$CONFIG_FILE"
  else
    log_build_phase_step 'Ignoring empty configuration file %s\n' $CONFIG_FILE
  fi
else
  log_build_phase_step 'Configuration file %s not found\n' $CONFIG_FILE
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Start the build process
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cd "$BUILD_DIR"

# Direct the Rust compiler output to the cache
export CARGO_TARGET_DIR="$CACHE_DIR/target"

#Â Use the correct profile arg format
CARGO_PROFILE_ARG="--release"

if [ "$RUST_CARGO_BUILD_PROFILE" != "release" ]
then
  CARGO_PROFILE_ARG="--profile $RUST_CARGO_BUILD_PROFILE"
fi

# Build the project
log_build_phase_step 'Building application: cargo build %s %s\n' "$CARGO_PROFILE_ARG" "$RUST_CARGO_BUILD_FLAGS"

if [ -z "${RUST_CARGO_BUILD_FLAGS}" ]
then
  # Do not enclose CARGO_PROFILE_ARG in double quotes - we need word splitting here!
  # shellcheck disable=SC2086
  cargo build $CARGO_PROFILE_ARG
else
  # shellcheck disable=SC2086
  cargo build $CARGO_PROFILE_ARG $RUST_CARGO_BUILD_FLAGS
fi

# Copy the binary from the cache back to the expected target directory
mkdir -p target/"$RUST_CARGO_BUILD_PROFILE"
find "$CARGO_TARGET_DIR/$RUST_CARGO_BUILD_PROFILE" -maxdepth 1 -type f -executable -exec cp -a -t "target/$RUST_CARGO_BUILD_PROFILE" {} \;

# macos version of find command for local testing only
# find "$CARGO_TARGET_DIR/$RUST_CARGO_BUILD_PROFILE" -maxdepth 1 -type f -perm +111 -exec cp -a {} "target/$RUST_CARGO_BUILD_PROFILE" \;

# Write final target directory to the file target_bin_dir
# The release script can then discover the path to the executable by reading this file
echo "target/$RUST_CARGO_BUILD_PROFILE" > "$BUILD_DIR/target_bin_dir"

log_build_phase_step 'Copied binary into %s\n' "$PWD/target/$RUST_CARGO_BUILD_PROFILE"
log_directory "$PWD/target/$RUST_CARGO_BUILD_PROFILE"
log_build_phase_exit $PHASE_NAME
