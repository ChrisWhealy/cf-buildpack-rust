#!/usr/bin/env bash
# usage: bin/finalize <build-dir> <cache-dir> <env-dir>

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
# ENV_DIR=${3:-}   At the moment, we don't need this argument value...

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Rust Build Settings
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
VERSION=stable

# Default build flags to pass to `cargo build`.
RUST_CARGO_BUILD_PROFILE="release"
RUST_CARGO_BUILD_FLAGS=""

# Import the toolchain configuration if present
if [ -f "$BUILD_DIR/rust-toolchain" ]
then
  VERSION="$(cat "$BUILD_DIR/rust-toolchain")"
fi

# If your Rust code does not live in the root directory of the repository, specify the pathname in `BUILD_PATH` in the
# `RustConfig` file
BUILD_PATH=""

# Import any cargo specific environment variables if present
if [ -f "$BUILD_DIR/RustConfig" ]
then
  . "$BUILD_DIR/RustConfig"
fi

# Throw toys out of pram if any command fails or a variable is unset
set -eu

# Check our configuration options.
if [ -z ${VERSION+x} ]
then
  >&2 echo "failed: Value for Rust VERSION missing or empty.  Correct this setting in either the rust-toolchain or the RustConfig file"
  exit 1
fi

# Switch to our cache directory.
mkdir -p "$CACHE_DIR"
cd "$CACHE_DIR"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Make sure the build tools are up to date
# The value of CARGO_HOME is predefined in this image
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
rustup self update
rustup update "$VERSION"
rustup default "$VERSION"

if [ ! -x "$CARGO_HOME/bin/rustc" ]
then
  echo "failed: $CARGO_HOME/bin/rustc is either missing or not flagged as executable"
  exit 1
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Start build process
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Direct the Rust compiler output to the cache
export CARGO_TARGET_DIR="$CACHE_DIR/target"

# Build the project then copy the binary from the cache back to the source tree
echo "-----> Building application using Cargo"
cd "$BUILD_DIR/$BUILD_PATH"
rm -rf target/

if [ -z "${RUST_CARGO_BUILD_FLAGS}" ]
then
  cargo build --"$RUST_CARGO_BUILD_PROFILE"
else
  cargo build --"$RUST_CARGO_BUILD_PROFILE" "$RUST_CARGO_BUILD_FLAGS"
fi

mkdir -p target/"$RUST_CARGO_BUILD_PROFILE"
find "$CARGO_TARGET_DIR/$RUST_CARGO_BUILD_PROFILE" -maxdepth 1 -type f -executable -exec cp -a -t target/"$RUST_CARGO_BUILD_PROFILE" {} \;

# Ensure compiled Rust program is in runtime environment PATH
# mkdir -p "$BUILD_DIR"/.profile.d
# echo "export PATH=$PATH:/app/target/release:/app/usr/local/bin" > "$BUILD_DIR"/.profile.d/rust.sh
