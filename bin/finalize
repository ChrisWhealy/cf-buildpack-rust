#!/usr/bin/env bash
# usage: bin/finalize <build-dir> <cache-dir> <env-dir>

# Throw toys out of pram if any command fails or a variable is unset
set -eu

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
# ENV_DIR=${3:-}

CONFIG_FILE=RustConfig
ENTER_PHASE='----->'
PHASE_STEP='......'
EXIT_PHASE='<-----'

printf "%s Start finalize\n" $ENTER_PHASE

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Rust Build Settings
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Ensure that at least CARGO_HOME is set correctly
. "$HOME/.cargo/env"

# Default build flags to pass to `cargo build`.
RUST_CARGO_BUILD_PROFILE="release"
RUST_CARGO_BUILD_FLAGS=""

# Import any cargo specific environment variables if present
if [ -f "$BUILD_DIR/$CONFIG_FILE" ]
then
  if [ -s "$BUILD_DIR/$CONFIG_FILE" ]
  then
    printf "%s Using cargo variables from configuration file %s\n" "$PHASE_STEP" "$CONFIG_FILE"
    cat "$BUILD_DIR/$CONFIG_FILE"
    . "$BUILD_DIR/$CONFIG_FILE"
  else
    printf "%s Ignoring empty configuration file %s\n" "$PHASE_STEP" "$CONFIG_FILE"
  fi
fi

# Write final target directory to the target_bin_dir file
# The release script can then discover the path to the executable by reading this file
echo target/$RUST_CARGO_BUILD_PROFILE > "$BUILD_DIR/target_bin_dir"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Start the build process
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
cd "$BUILD_DIR"

# Direct the Rust compiler output to the cache
export CARGO_TARGET_DIR="$CACHE_DIR/target"

#Â Use the correct profile arg format
CARGO_PROFILE_ARG="--release"
TARGET_BIN_DIR="release"

if [ "$RUST_CARGO_BUILD_PROFILE" != "release" ]
then
  CARGO_PROFILE_ARG="--profile $RUST_CARGO_BUILD_PROFILE"
  TARGET_BIN_DIR=debug
fi

# Build the project
printf  "%s Building application: cargo build %s %s\n" "$PHASE_STEP" "$CARGO_PROFILE_ARG" "$RUST_CARGO_BUILD_FLAGS"

if [ -z "${RUST_CARGO_BUILD_FLAGS}" ]
then
  cargo build $CARGO_PROFILE_ARG
else
  cargo build $CARGO_PROFILE_ARG "$RUST_CARGO_BUILD_FLAGS"
fi

ls -al "$CARGO_TARGET_DIR/$TARGET_BIN_DIR"

# Copy the binary from the cache back to the expected target directory
mkdir -p target/"$RUST_CARGO_BUILD_PROFILE"
find "$CARGO_TARGET_DIR/$TARGET_BIN_DIR" -maxdepth 1 -type f -executable -exec cp -a -t target/"$RUST_CARGO_BUILD_PROFILE" {} \;

# macos version of find command for local testing only
# find "$CARGO_TARGET_DIR/$TARGET_BIN_DIR" -maxdepth 1 -type f -perm +111 -exec cp -a {} target/"$RUST_CARGO_BUILD_PROFILE" \;

printf "%s End finalize\n" "$EXIT_PHASE"
